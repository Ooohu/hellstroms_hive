<?xml version="1.0" ?>

<!-- Some basic information, a tag that defines uniquely this analysis, and a topology that also defines it -->
<topology tag="1g0pJan2020_v1" name ="1#gamma0p" def = "reco_vertex_size==1 &amp;&amp; reco_asso_showers==1  &amp;&amp; reco_asso_tracks==0" bdtcut = "( 0.958,0.76,0.618)" /> 
<!-- ================================================== BDT FILES [First the ones that we stack in things]==================================================== -->

<filedir>/pnfs/uboone/persistent/users/markross/single_photon_persistent_data/</filedir>

<bdtfile filename = "vertexed_mcc9_v33/Test/ncdeltarad_overlay_test_run1_v33.0.root" tag = "NCDeltaRadOverlay" hist_style = "hist" dirs = "singlephotonana/" col = "(1.0,0.4,0.4)" plot_name = "x2 SM NC #Delta Radiative (LEE)" scale = "2.0" signal = "true" plot_on_top = "false">
    <definition>
        <cut> mctruth_is_delta_radiative==1 </cut>
        <!--    <cut> mctruth_nu_vertex_x &gt; 10.0 &amp;&amp; mctruth_nu_vertex_x &lt; 246.35 </cut>
        <cut> mctruth_nu_vertex_y &gt; -106.5 &amp;&amp; mctruth_nu_vertex_y &lt; 106.5 </cut>
        <cut> mctruth_nu_vertex_z &gt; 10.0 &amp;&amp; mctruth_nu_vertex_z &lt; 1026.8 </cut>
        <cut> mctruth_cc_or_nc == 1 </cut>
        <cut> mctruth_num_exiting_pi0 == 0</cut>
        <cut> mctruth_exiting_photon_energy &gt; 0.02 </cut>
        <cut> Sum$(mctruth_exiting_proton_energy-0.93827 &gt; 0.02)==1</cut> 
        <cut> sim_shower_overlay_fraction[0] &lt; 0.8 </cut>
        <cut> sim_shower_pdg[0] == 22 </cut>
        <cut> sim_track_overlay_fraction[0] &lt; 0.8 </cut>
        <cut> sim_track_pdg[0] == 2212 </cut> -->
    </definition>
</bdtfile>

<bdtfile filename = "vertexed_mcc9_v33/Test/ncdeltarad_overlay_test_run1_v33.0.root" tag = "NCDeltaRadOverlaySM" hist_style = "hist" dirs = "singlephotonana/" col = "(0.97,0.75,0.0)" plot_name = "1x SM NC #Delta Radiative" signal = "true" plot_on_top = "false" >
    <definition>
        <cut> mctruth_is_delta_radiative==1 </cut>
        <!--    <cut> mctruth_nu_vertex_x &gt; 10.0 &amp;&amp; mctruth_nu_vertex_x &lt; 246.35 </cut>
        <cut> mctruth_nu_vertex_y &gt; -106.5 &amp;&amp; mctruth_nu_vertex_y &lt; 106.5 </cut>
        <cut> mctruth_nu_vertex_z &gt; 10.0 &amp;&amp; mctruth_nu_vertex_z &lt; 1026.8 </cut> -->
        <cut> mctruth_cc_or_nc == 1 </cut>
        <cut> mctruth_num_exiting_pi0 == 0</cut>
        <cut> mctruth_exiting_photon_energy &gt; 0.02 </cut>
        <cut> Sum$(mctruth_exiting_proton_energy-0.93827 &gt; 0.02)==0</cut>
        <cut> mctruth_nu_vertex_x &gt; 5.0 &amp;&amp; mctruth_nu_vertex_x &lt; 252.35 </cut>
        <cut> mctruth_nu_vertex_y &gt; -111.5 &amp;&amp; mctruth_nu_vertex_y &lt; 111.5 </cut>
        <cut> mctruth_nu_vertex_z &gt; 5.0 &amp;&amp; mctruth_nu_vertex_z &lt; 1031.8 </cut> 
 
        <!--<cut> TMath::Min(reco_track_end_dist_to_SCB,reco_track_start_dist_to_SCB)>2 </cut>-->
        
        <!--    <cut> mctruth_daughters_pdg==22 &amp;&amp; mctruth_daughters_status_code==1 &amp;&amp; mctruth_daughters_endx>2 </cut>-->
               <cut> sim_shower_overlay_fraction[0] &lt; 0.5 </cut>
                <cut> sim_shower_pdg[0] == 22 </cut>
                <!--         <cut> sim_track_overlay_fraction[0] &lt; 0.5 </cut>
                <cut> sim_track_pdg[0] == 2212 </cut>
                <cut>  TMath::Min(reco_track_end_dist_to_SCB,reco_track_start_dist_to_SCB)>2 </cut> -->
       
    </definition>
</bdtfile>



<bdtfile filename = "vertexed_mcc9_v33/Test/ncpi0_overlay_test_run1_v33.0.root" tag = "NCPi0" hist_style = "hist" dirs = "singlephotonana/" col = "(0.6,0.8,1.0)" plot_name = "BNB NC 1 #pi^{0}" scale = "1.0">
    <definition>
        <cut> !mctruth_is_delta_radiative==1 </cut>  
        <cut> mctruth_cc_or_nc==1 </cut>
        <cut> mctruth_num_exiting_pi0==1</cut>
    </definition>
</bdtfile>


<bdtfile filename = "vertexed_mcc9_v33/ccpi0_overlay_run1_v33.0.root" tag = "CCPi0" hist_style = "hist" dirs = "singlephotonana/" col = "(0.4,0.8,1.0)" plot_name = "BNB CC 1 #pi^{0}" scale = "1.0">
    <definition>
        <cut> mctruth_cc_or_nc==0 </cut>
        <cut> mctruth_num_exiting_pi0==1</cut>
    </definition>
</bdtfile>


<bdtfile filename = "vertexed_mcc9_v33/Test/bnb_overlay_test_run1_v33.0.root" tag = "BNBOverlays" hist_style = "hist" dirs = "singlephotonana/" col = "(0.4,0.4,1.0)" plot_name = "BNB Other" >
    <definition>
        <cut> !mctruth_is_delta_radiative==1 </cut>  
        <cut> fabs(mctruth_nu_pdg)==14  </cut>
        <cut> !(mctruth_cc_or_nc==1 &amp;&amp; mctruth_num_exiting_pi0==1)</cut>
        <cut> !(mctruth_cc_or_nc==0 &amp;&amp; mctruth_num_exiting_pi0==1)</cut>
    </definition>
</bdtfile>

<bdtfile filename = "vertexed_mcc9_v33/Test/nue_overlay_test_run1_v33.0.root" tag = "NueOverlays" hist_style = "hist" dirs = "singlephotonana/" col = "(0.9,0.5,0.9)" plot_name = "#nu_{e} Intrinsic" >
    <definition>
        <cut> !mctruth_is_delta_radiative==1 </cut>  
        <cut> fabs(mctruth_nu_pdg)==12  </cut>
    </definition>
</bdtfile>


<bdtfile filename = "vertexed_mcc9_v33/dirt_overlay_run1_v33.0.root" tag = "Dirt" hist_style = "hist" dirs = "singlephotonana/" col = "(0.6,0.4,0.2)" plot_name = "Dirt" > 
    <definition><cut>1</cut></definition>
</bdtfile>

<bdtfile filename = "vertexed_mcc9_v26/data_5e19_run1_v26.51.root" tag = "Data5e19" hist_style = "E1p" dirs = "singlephotonana/" col = "(0.0,0.0,0.0)" plot_name = "On-Beam Data">
    <definition><cut>1</cut></definition>
    <data type="OnBeam">
        <tor860_wcut> 4.026e+19 </tor860_wcut>   
        <E1DCNT_wcut> 8915733.0</E1DCNT_wcut>   
    </data>
</bdtfile>

<bdtfile filename = "vertexed_mcc9_v26/AllRun/Split/bnbext_test_run1_v26.5.root" tag = "BNBext" hist_style = "hist" dirs = "singlephotonana/" col = "(0.2,0.8,0.2)" plot_name = "Cosmic Data" fillstyle = "3333" scale = "1">
    <definition>
        <cut> 1 </cut>
    </definition>
    <data type="OffBeam">
        <tor860_wcut> 4.026e+19 </tor860_wcut>   
        <E1DCNT_wcut> 8915733.0</E1DCNT_wcut>   
        <EXT>36566176.0</EXT>  
    </data>
</bdtfile>

<!-- ================================================== BDT FILES [Now the training files]==================================================== -->
<bdtfile filename = "vertexed_mcc9_v33/Train/ncdeltarad_overlay_train_v33.0.root" tag = "NCDeltaRadOverlayTrain" hist_style = "hist" dirs = "singlephotonana/" col = "(1.0,0.4,0.4)" plot_name = "NC Delta Train">
    <definition>
        <cut> mctruth_is_delta_radiative==1 </cut>  
        <cut> mctruth_nu_vertex_x &gt; 5.0 &amp;&amp; mctruth_nu_vertex_x &lt; 252.35 </cut>
        <cut> mctruth_nu_vertex_y &gt; -111.5 &amp;&amp; mctruth_nu_vertex_y &lt; 111.5 </cut>
        <cut> mctruth_nu_vertex_z &gt; 5.0 &amp;&amp; mctruth_nu_vertex_z &lt; 1031.8 </cut> 
    <!--    <cut> TMath::Min(reco_track_end_dist_to_SCB,reco_track_start_dist_to_SCB)>2 </cut> -->
<!--        <cut> mctruth_daughters_pdg==22 &amp;&amp; mctruth_daughters_status_code==1 &amp;&amp; mctruth_daughters_endx>2 </cut>-->
        <cut> mctruth_cc_or_nc == 1 </cut>
        <cut> mctruth_num_exiting_pi0 == 0</cut>
        <cut> mctruth_exiting_photon_energy &gt; 0.02 </cut>
        <cut> Sum$(mctruth_exiting_proton_energy-0.93827 &gt; 0.02 ) ==0 </cut>
    </definition>
    <training>
        <cut> sim_shower_overlay_fraction[0] &lt; 0.5 </cut>
        <cut> sim_shower_pdg[0] == 22 </cut>
     </training>
</bdtfile>

<bdtfile filename = "vertexed_mcc9_v33/Test/ncdeltarad_overlay_test_v33.0.root" tag = "NCDeltaRadOverlayTest" hist_style = "hist" dirs = "singlephotonana/" col = "(1.0,0.4,0.4)" plot_name = "NC Delta Test">
    <definition>
        <cut> mctruth_is_delta_radiative==1 </cut> 
        <!--    <cut> TMath::Min(reco_track_end_dist_to_SCB,reco_track_start_dist_to_SCB)>2 </cut> -->

        <cut> mctruth_nu_vertex_x &gt; 5.0 &amp;&amp; mctruth_nu_vertex_x &lt; 252.35 </cut>
        <cut> mctruth_nu_vertex_y &gt; -111.5 &amp;&amp; mctruth_nu_vertex_y &lt; 111.5 </cut>
        <cut> mctruth_nu_vertex_z &gt; 5.0 &amp;&amp; mctruth_nu_vertex_z &lt; 1031.8 </cut> 

<!--        <cut> mctruth_daughters_pdg==22 &amp;&amp; mctruth_daughters_status_code==1 &amp;&amp; mctruth_daughters_endx>2 </cut>-->
        <cut> mctruth_cc_or_nc == 1 </cut>
        <cut> mctruth_num_exiting_pi0 == 0</cut>
        <cut> mctruth_exiting_photon_energy &gt; 0.02 </cut>
        <cut> Sum$(mctruth_exiting_proton_energy-0.93827 &gt; 0.02 )==0 </cut>
    </definition>
<training>
        <cut> sim_shower_overlay_fraction[0] &lt; 0.5 </cut>
        <cut> sim_shower_pdg[0] == 22 </cut>
   </training>
</bdtfile>


<bdtfile filename = "vertexed_mcc9_v26/AllRun/Split/bnbext_train_v26.5.root" tag = "BNBextTrain" hist_style = "hist" dirs = "singlephotonana/" col = "(0.2,0.8,0.2)" plot_name = "Cosmic Data Training" fillstyle = "3333" scale = "1">
    <definition>
        <cut>1</cut>
    </definition>
    <training><cut>1</cut></training>
</bdtfile>

<bdtfile filename = "vertexed_mcc9_v26/AllRun/Split/bnbext_test_v26.5.root" tag = "BNBextTest" hist_style = "hist" dirs = "singlephotonana/" col = "(0.2,0.8,0.2)" plot_name = "Cosmic Data Test" fillstyle = "3333" scale = "1">
    <definition>
        <cut>1</cut>
    </definition>
    <training><cut>1</cut></training>
</bdtfile>



<bdtfile filename = "vertexed_mcc9_v33/Train/ncpi0_overlay_train_v33.0.root" tag = "NCpi0Train" hist_style = "hist" dirs = "singlephotonana/" col = "(0.4,0.4,1.0)" plot_name = "NCpi0 Train" >
    <definition>
        <cut> !mctruth_is_delta_radiative==1 </cut>  
        <cut> (mctruth_cc_or_nc==1 &amp;&amp; mctruth_num_exiting_pi0==1)</cut>
    </definition>
    <training>
        <cut> sim_shower_overlay_fraction[0]&lt;0.9</cut>
        <cut> sim_shower_pdg[0]==22</cut>
   </training>
</bdtfile>

<bdtfile filename = "vertexed_mcc9_v33/Test/ncpi0_overlay_test_v33.0.root" tag = "NCpi0Test" hist_style = "hist" dirs = "singlephotonana/" col = "(0.4,0.4,1.0)" plot_name = "NCpi0 Test" >
    <definition>
        <cut> !mctruth_is_delta_radiative==1 </cut>  
        <cut> (mctruth_cc_or_nc==1 &amp;&amp; mctruth_num_exiting_pi0==1)</cut>
    </definition>
    <training>
        <cut> sim_shower_overlay_fraction[0]&lt;0.9</cut>
        <cut> sim_shower_pdg[0]==22</cut>
    </training>
</bdtfile>

<bdtfile filename = "vertexed_mcc9_v33/Train/bnb_overlay_train_v33.0.root" tag = "BNBOverlaysTrain" hist_style = "hist" dirs = "singlephotonana/" col = "(0.4,0.4,1.0)" plot_name = "BNB Other Train" >
    <definition>
        <cut> !mctruth_is_delta_radiative==1 </cut>  
        <cut> !(mctruth_cc_or_nc==1 &amp;&amp; mctruth_num_exiting_pi0==1)</cut>
        <!-- <cut> fabs(mctruth_nu_pdg)==14  </cut> -->
    </definition>
    <training>
        <cut> sim_shower_overlay_fraction[0]&lt;0.95</cut>
   </training>
</bdtfile>

<bdtfile filename = "vertexed_mcc9_v33/Test/bnb_overlay_test_v33.0.root" tag = "BNBOverlaysTest" hist_style = "hist" dirs = "singlephotonana/" col = "(0.4,0.4,1.0)" plot_name = "BNB Other Test" >
    <definition>
        <cut> !mctruth_is_delta_radiative==1 </cut>  
        <cut> !(mctruth_cc_or_nc==1 &amp;&amp; mctruth_num_exiting_pi0==1)</cut>
        <!--  <cut> fabs(mctruth_nu_pdg)==14  </cut> -->
    </definition>
    <training>
        <cut> sim_shower_overlay_fraction[0]&lt;0.95</cut>
   </training>
</bdtfile>

<!--
<bdtfile filename = "vertexed_mcc9_v33/Train/ncpi0_overlay_train_v33.0.root" tag = "SSVTrain" hist_style = "hist" dirs = "singlephotonana/" col = "(0.4,0.4,1.0)" plot_name = "SSV Train" >
    <definition>
        <cut> !mctruth_is_delta_radiative==1 </cut>  
        <cut> (mctruth_cc_or_nc==1 &amp;&amp; mctruth_num_exiting_pi0==1)</cut>
    </definition>
    <training>
        <cut> sim_shower_pdg[0]==22</cut>
    </training>
</bdtfile>

<bdtfile filename = "vertexed_mcc9_v33/Test/ncpi0_overlay_test_v33.0.root" tag = "SSVTest" hist_style = "hist" dirs = "singlephotonana/" col = "(0.4,0.4,1.0)" plot_name = "SSV Test" >
    <definition>
        <cut> !mctruth_is_delta_radiative==1 </cut>  
        <cut> (mctruth_cc_or_nc==1 &amp;&amp; mctruth_num_exiting_pi0==1)</cut>
    </definition>
    <training>
        <cut> sim_shower_pdg[0]==22</cut>
    </training>
</bdtfile>
-->

<!--

<bdtfile filename = "vertexed_mcc9_v33/Train/nue_overlay_train_v33.0.root" tag = "NueIntrinTrain" hist_style = "hist" dirs = "singlephotonana/" col = "(0.2,0.2,1.0)" plot_name = "Nue Intrin Train">
    <definition>
        <cut>1</cut>
    </definition>
    <training>
        <cut>sim_shower_overlay_fraction[0]&lt;0.9</cut>
   </training>
</bdtfile>

<bdtfile filename = "vertexed_mcc9_v33/Test/nue_overlay_test_v33.0.root" tag = "NueIntrinTest" hist_style = "hist" dirs = "singlephotonana/" col = "(0.2,0.2,1.0)" plot_name = "Nue Intrin Test">
    <definition>
        <cut> 1 </cut>
    </definition>
    <training>
        <cut>sim_shower_overlay_fraction[0]&lt;0.9</cut>
    </training>
</bdtfile>

-->


<!-- ============================================== ACTUAL BDT TMVA Setup ==================================== -->

<mva type="BDT" use="yes" tag = "COSMIC" name ="Cosmic focused BDT" binning = "(36,0.9,1.0)">
    <method type = "XGBoost" use = "yes">
        <param> n_trees=950</param>
        <param> tree_method=exact</param>
        <param> n_gpus=0</param>
        <param> objective=binary:logistic</param>
        <param> eval_metric=logloss</param>
        <param> min_child_weight=1</param> 
        <param> gamma=2</param>          <!--   Minimum reduction required to split . The larger gamma is, the more conservative the algorithm will be.    -->
        <param> max_depth=6</param>    <!-- How many layers deep each tree -->
        <param> eta=0.01</param>        <!-- Learning Rate -->
        <param> subsample=0.9</param> <!-- % of events passed to each tree -->
        <param> colsample_bytree= 0.95</param>   <!-- % of features that are passed to each tree  -->
        <param> verbosity=1</param>
    </method>
    <file
        bkg_train_tag = "BNBextTrain" 
        bkg_test_tag = "BNBextTest"
        bkg_test_cut = "1" 
        sig_train_tag = "NCDeltaRadOverlayTrain"
        sig_test_tag = "NCDeltaRadOverlayTest"
        sig_test_cut = "1"
        />
    <scan min = "0.95" max = "0.97" steps="5"/>
</mva>



<mva type="BDT" use="yes" tag = "BNB" name ="BNB focused BDT" binning = "(24,0.0,1.0)">
    <method type = "XGBoost" use = "yes">
        <param> n_trees= 250</param>
        <param> tree_method=exact</param>
        <param> n_gpus=0</param>
        <param> objective=binary:logistic</param>
        <param> min_child_weight=1</param> 
        <param> gamma=1.6</param>          <!--   Minimum reduction required to split . The larger gamma is, the more conservative the algorithm will be.    -->
        <param> max_depth=7</param>    <!-- How many layers deep each tree -->
        <param> eta=0.02</param>        <!-- Learning Rate -->
        <param> subsample=0.85</param> <!-- % of events passed to each tree -->
        <param> colsample_bytree= 0.95</param>   <!-- % of features that are passed to each tree  -->
    </method>
    <file
        bkg_train_tag = "BNBOverlaysTrain"
        bkg_test_tag = "BNBOverlaysTest"
        bkg_test_cut = "1"
        sig_train_tag = "NCDeltaRadOverlayTrain"
        sig_test_tag = "NCDeltaRadOverlayTest"
        sig_test_cut = "1"
        />
    <scan min = "0.76" max = "0.78" steps="5"/>
</mva>

<mva type="BDT" use="yes" tag = "NCPi0" name ="NCpi0 focused BDT" binning = "(24,0.0,1.0)">
    <method type = "XGBoost" use = "yes">
        <param> n_trees= 400</param>
        <param> tree_method=exact</param>
        <param> n_gpus=0</param>
        <param> objective=binary:logistic</param>
        <param> gamma=0.75</param>          <!--   Minimum reduction required to split . The larger gamma is, the more conservative the algorithm will be.    -->
        <param> max_depth=7</param>    <!-- How many layers deep each tree -->
        <param> eta=0.01</param>        <!-- Learning Rate -->
        <param> subsample=0.88</param> <!-- % of events passed to each tree -->
        <param> colsample_bytree= 0.9</param>   <!-- % of features that are passed to each tree  -->
        <param> verbosity=1</param>   
    </method>
    <file      
        bkg_train_tag = "NCpi0Train"
        bkg_test_tag = "NCpi0Test"
        bkg_test_cut = "1"
        sig_train_tag = "NCDeltaRadOverlayTrain"
        sig_test_tag = "NCDeltaRadOverlayTest"
        sig_test_cut = "1"
        />
    <scan min = "0.61" max = "0.63" steps="5"/>
</mva>

<!--
<mva type="BDT" use="yes" tag = "Nue" name ="Nue fake BDT" binning = "(24,0.0,1.0)">
    <method type = "XGBoost" use = "yes">
        <param> n_trees= 350</param>
        <param> tree_method=exact</param>
        <param> n_gpus=0</param>
        <param> objective=binary:logistic</param>
        <param> min_child_weight=1</param> 
        <param> gamma=1.2</param>         
        <param> max_depth=6</param>   
        <param> eta=0.0125</param>      
        <param> subsample=0.8</param> 
        <param> colsample_bytree= 0.9</param>   
    </method>
    <file      
        bkg_train_tag = "NueIntrinTrain" 
        bkg_test_tag  = "NueIntrinTest"  
        bkg_test_cut  = "1"
        sig_train_tag = "NCDeltaRadOverlayTrain"
        sig_test_tag = "NCDeltaRadOverlayTest"
        sig_test_cut = "1"
        />
    <scan min = "0.0" max = "0.01" steps="1"/>
</mva> -->

<!--
<mva type="BDT" use="yes" tag = "SSV" name ="SSV focused BDT" binning = "(24,0.0,1.0)">
    <method type = "XGBoost" use = "yes">
        <param> n_trees= 1300</param>
         <param> tree_method=exact</param>
        <param> n_gpus=0</param>
        <param> objective=binary:logistic</param>
        <param> gamma=1.6</param>        
        <param> max_depth=7</param>        
         <param> eta=0.015</param>      
        <param> subsample=0.85</param> 
        <param> colsample_bytree= 0.95</param> 
        <param> verbosity=1</param>   
    </method>
    <file      
        bkg_train_tag = "SSVTrain"
        bkg_test_tag = "SSVTest"
        bkg_test_cut = "1"
        sig_train_tag = "NCDeltaRadOverlayTrain"
        sig_test_tag = "NCDeltaRadOverlayTest"
        sig_test_cut = "1"
        />
    <scan min = "0.70" max = "0.735" steps="5"/>
</mva>

-->

<!-- ================================================== PRE-CUTS   ==================================================== -->

<!--<precut def = "reco_track_displacement<85&amp;&amp;reco_track_displacement>65" name = "track cut"/>-->
<precut def = "reco_shower_energy_max[0]>30" name = "Michel Cut"/>
<precut def = "reco_shower_start_dist_to_SCB > 2" name = "Shower start Contained in SCB"/>
<precut def = "(reco_shower_energy_max[0]<166.67 || reco_shower_energy_max[0]>222.22)" name = "Michel Cut"/>

<!--
<precut def = "reco_shower_energy_max[0]>167" name = "Michel Cut"/>
<precut def = "reco_shower_energy_max[0]<222" name = "Michel Cut"/>
<precut def = "(reco_shower_energy_max[0]<166.67 || reco_shower_energy_max[0]>222.22)" name = "Michel Cut"/>
<precut def = "reco_shower_energy_max[0]>167" name = "Michel Cut"/>
<precut def = "reco_shower_energy_max[0]<222" name = "Michel Cut"/>
<precut def = "(reco_shower_energy_max[0]<380)" name = "Michel Cut"/>
<precut def = "reco_shower_dirx[0]<0.5 &amp;&amp;reco_shower_dirz[0]>0" name = "Directional Cut"/>

<precut def = "(((reco_shower_energy_max[0]>194&amp;&amp;((reco_shower_startx[0]>35&amp;&amp;reco_shower_startx[0]<60)||(reco_shower_startx[0]>130)))||(reco_shower_energy_max[0]<194&amp;&amp;reco_shower_startx[0]>50))&amp;&amp;reco_shower_startx[0]<230)" name = "Position x Cut"/>

<precut def = "((reco_shower_energy_max[0]>194&amp;&amp;reco_shower_starty[0]>-70)||(reco_shower_energy_max[0]<194&amp;&amp;(reco_shower_starty[0]>-10||reco_shower_starty[0]<-30)))" name = "Position y Cut"/>

<precut def = "((reco_shower_energy_max[0]>194&amp;&amp;reco_shower_startz[0]<900)||(reco_shower_energy_max[0]<194))" name = "Position z Cut"/>
-->

<!--
<precut def = "((reco_shower_energy_max[0]>0.194&amp;&amp;((reco_shower_startx[0]>30&amp;&amp;reco_shower_startx[0]<60)||(reco_shower_startx[0]>130&amp;&amp;reco_shower_startx[0]<230)))||(reco_shower_energy_max[0]<0.194&amp;&amp;(reco_shower_startx[0]>50&amp;&amp;reco_shower_startx[0]<230)))" name = "Position x Cut"/>
<precut def = "(((reco_shower_energy_max[0]>0.194&amp;&amp;((reco_shower_startx[0]>30&amp;&amp;reco_shower_startx[0]<60)||(reco_shower_startx[0]>130&amp;&amp;reco_shower_startx[0]<230)))||(reco_shower_energy_max[0]<0.194&amp;&amp;(reco_shower_startx[0]>50&amp;&amp;reco_shower_startx[0]<230)))||((reco_shower_energy_max[0]>0.194&amp;&amp;reco_shower_starty[0]>-70)||(reco_shower_energy_max[0]<0.194&amp;&amp;(reco_shower_starty[0]>-10||reco_shower_starty[0]<-30)))||((reco_shower_energy_max[0]>0.194&amp;&amp;reco_shower_startx[0]<900)||(reco_shower_energy_max[0]<194)))" name = "Position Cut"/>
-->
<!--<precut def = "(CRT_veto_nhits < 0 || Max$(CRT_veto_hit_PE)<100)" name = "crt veto"/> -->

<!--
<precut def = "max(max(reco_shower_kalman_dEdx_plane0_median[0],reco_shower_kalman_dEdx_plane1_median[0]),reco_shower_kalman_dEdx_plane2_median[0])<6" name= "maximum kalman dedx all planes "/>
<precut def = "reco_shower_energy_max[0]>167&amp;&amp;reco_shower_energy_max[0]<220" name = "up bound"/>
<precut def = "reco_shower_energy_max[0]>167&amp;&amp;reco_shower_energy_max[0]<220" name = "up bound"/>
<precut def = "(reco_shower_theta_yz[0]>-1.5 &amp;&amp;reco_shower_theta_yz[0]<1.5)" name = "Angle theta_yz"/>

<precut def = "reco_shower_dEdx_plane2_median[0]<5.5" name = "dEdx Plane2"/>
<precut def = "reco_shower_dEdx_plane1_median[0]<8" name = "dEdx Plane1"/>

<precut def = "(reco_shower_startx[0]>20 &amp;&amp;reco_shower_startx[0]<240)" name = "pos x"/>
<precut def = "(reco_shower_starty[0]>-75 &amp;&amp;reco_shower_starty[0]<120)" name = "pos y"/>


<precut def = "(reco_shower_startz[0]>400 &amp;&amp;reco_shower_startz[0]<825)" name = "Position z"/>
-->
<!-- ============================================== Variables, BDT training and otherwise ====================================== -->

<var def = "cos(reco_shower_phi_yx[0])" binning = "(4,-1,1)" unit = "Reconstructed Shower Cos #phi_{yx}" type = "d"    training=""/>
<var def = "cos(reco_shower_theta_yz[0])" binning = "(4,-1,1)" unit = "Reconstructed Shower Cos #theta_{yz}" type = "d"    training=""/>

<var def = "reco_shower_phi_yx[0]" binning = "(7,-3.14,3.14)" unit = "Reconstructed Shower  #phi_{yx} [rad]" type = "d"    training="012"/>
<var def = "reco_shower_theta_yz[0]" binning = "(7,-3.14,3.14)" unit = "Reconstructed Shower #theta_{yz} [rad]" type = "d"    training=""/>

<var def = "reco_shower_energy_max[0]/1000.0" binning = "(18,0,0.5)" unit = "Reconstructed Shower Energy [GeV]" type = "d"    training=""/> 
<var def = "reco_shower_energy_max[0]/1000.0" binning = "(1,0,0.5)" unit = "Reconstructed Shower Energy [GeV]" type = "d"    training=""/> 

<var def = "reco_shower_dirx[0]" unit = "Reconstructed Shower Direction on X" binning = "(4,-1,1)" type = "d" training = ""  />
<var def = "reco_shower_diry[0]" unit = "Reconstructed Shower Direction on Y" binning = "(4,-1,1)" type = "d" training = ""  />
<var def = "reco_shower_dirz[0]" unit = "Reconstructed Shower Direction on Z" binning = "(4,-1,1)" type = "d" training = ""  />
<!--9-->
<var def = "reco_shower_startx" binning = "(4,-20,270)" unit = "Reconstructed Shower Start X [cm]" type="d"   training=""/>
<var def = "reco_shower_starty" binning = "(4,-140,140)" unit = "Reconstructed Shower Start Y [cm]" type="d"   training=""/>
<var def = "reco_shower_startz" binning = "(4,-20,1100)" unit = "Reconstructed Shower Start Z [cm]" type="d"   training=""/>


<!--12-->

<var def="sqrt(2.0*#C0#*#C1#*(1.0-(0.5)))/1000" binning = "(18, 0, 0.3)" unit = "Corrected #pi^{0} Invariant Mass OPANG 60deg[GeV]" type = "d"  training=""/>
<var def="sqrt(2.0*#C0#*#C1#*(1.0))/1000" binning = "(18, 0, 0.3)" unit = "Corrected #pi^{0} Invariant Mass OPANG 90deg [GeV]" type = "d"  training=""/>


<!--
<alias key="C0" value ="(1.21989*reco_shower_energy_max[i_shr[0]] + 8.50486)"/>
<alias key="C1" value ="(1.21989*reco_shower_energy_max[i_shr[1]] + 8.50486)"/>
<alias key="OPANG1" value="(reco_shower_dirx[i_shr[0]]*reco_shower_dirx[i_shr[1]] + reco_shower_diry[i_shr[0]]*reco_shower_diry[i_shr[1]] + reco_shower_dirz[i_shr[0]]*reco_shower_dirz[i_shr[1]])" /> 
-->
<alias key="C0" value ="(1.21989*reco_shower_energy_max[0] + 8.50486)"/>
<alias key="C1" value ="(1.21989*0.03 + 8.50486)"/>
<alias key="OPANG1" value="(reco_shower_dirx[i_shr[0]]*reco_shower_dirx[i_shr[1]] + reco_shower_diry[i_shr[0]]*reco_shower_diry[i_shr[1]] + reco_shower_dirz[i_shr[0]]*reco_shower_dirz[i_shr[1]])" /> 

<var def = "sqrt(1-pow(reco_shower_dirx[0],2))*max(max(reco_shower_dEdx_plane0_median[0]*cos(reco_shower_theta_yz[0]-2.0944),reco_shower_dEdx_plane1_median[0]*cos(reco_shower_theta_yz[0]-1.0472)),reco_shower_dEdx_plane2_median[0]*cos(reco_shower_theta_yz[0]))" binning="(5,0.0,10.0)" unit = "Max. Projected Shower median dE/dx on all planes [Mev/cm]" type = "d" logplot = "false"  training = "013"/>

<var def = "sqrt(1-pow(reco_shower_dirx[0],2))*max(max(reco_shower_dEdx_plane0_max[0]*cos(reco_shower_theta_yz[0]-2.0944),reco_shower_dEdx_plane1_max[0]*cos(reco_shower_theta_yz[0]-1.0472)),reco_shower_dEdx_plane2_max[0]*cos(reco_shower_theta_yz[0]))" binning="(5,0.0,10.0)" unit = "Max. Projected Shower max dE/dx on all planes [Mev/cm]" type = "d" logplot = "false"  training = "013"/>


<var def = "reco_shower_dEdx_plane2_median[0]" binning = "(5,0,10.0)" unit = "median dedx plane 2 [mev/cm]" type = "d"   training =""/>
<var def = "reco_shower_dEdx_plane1_median[0]" binning = "(5,0,10.0)" unit = "median dedx plane 1 [mev/cm]" type = "d"   training =""/>
<var def = "reco_shower_dEdx_plane0_median[0]" binning = "(5,0,10.0)" unit = "median dedx plane 0 [mev/cm]" type = "d"   training =""/>
<var def = "max(max(reco_shower_dEdx_plane0_median[0],reco_shower_dEdx_plane1_median[0]),reco_shower_dEdx_plane2_median[0])" binning = "(5,0,10.0)" unit = "maximum median dedx all planes[mev/cm]" type = "d"   training =""/>

<var def = "reco_shower_dEdx_plane2_max[0]" binning = "(5,0,10.0)" unit = "max dedx plane 2 [mev/cm]" type = "d"   training =""/>
<var def = "reco_shower_dEdx_plane1_max[0]" binning = "(5,0,10.0)" unit = "max dedx plane 1 [mev/cm]" type = "d"   training =""/>
<var def = "reco_shower_dEdx_plane0_max[0]" binning = "(5,0,10.0)" unit = "max dedx plane 0 [mev/cm]" type = "d"   training =""/>
<var def = "max(max(reco_shower_dEdx_plane0_max[0],reco_shower_dEdx_plane1_max[0]),reco_shower_dEdx_plane2_max[0])" binning = "(5,0,10.0)" unit = "maximum max dedx all planes [mev/cm]" type = "d"   training =""/>

<var def = "reco_shower_kalman_dEdx_plane2_median[0]" binning = "(5,0,10.0)" unit = "Shower dEdx plane 2 (Kalman) [MeV/cm]" type = "d"   training =""/>
<var def = "reco_shower_kalman_dEdx_plane1_median[0]" binning = "(5,0,10.0)" unit = "Shower dEdx plane 1 (Kalman) [MeV/cm]" type = "d"   training =""/>
<var def = "reco_shower_kalman_dEdx_plane0_median[0]" binning = "(5,0,10.0)" unit = "Shower dEdx plane 0 (Kalman) [MeV/cm]" type = "d"   training =""/>
<var def = "max(max(reco_shower_kalman_dEdx_plane0_median[0],reco_shower_kalman_dEdx_plane1_median[0]),reco_shower_kalman_dEdx_plane2_median[0])" binning = "(5,0,10.0)" unit = "maximum kalman dedx all planes [mev/cm]" type = "d"   training =""/>

<var def = "reco_shower3d_dEdx_plane2[0]" binning = "(5,0,10.0)" unit = "Shower3D dedx plane 2 [mev/cm]" type = "d"   training =""/>
<var def = "reco_shower3d_dEdx_plane1[0]" binning = "(5,0,10.0)" unit = "Shower3D dedx plane 1 [mev/cm]" type = "d"   training =""/>
<var def = "reco_shower3d_dEdx_plane0[0]" binning = "(5,0,10.0)" unit = "Shower3D dedx plane 0 [mev/cm]" type = "d"   training ="012"/>
<var def = "max(max(reco_shower3d_dEdx_plane0[0],reco_shower3d_dEdx_plane1[0]),reco_shower3d_dEdx_plane2[0])" binning = "(5,0,10.0)" unit = "maximum shower3D dedx all planes [mev/cm]" type = "d"   training =""/>

<!--30-->

<var def = "TMath::Min(fabs(acos(reco_shower_dirz)),fabs(acos(-reco_shower_dirz)))" binning = "(24,0.0,1.571)" unit = "Shower Beamyness" type="d" training = "012"/>

<var def = "TMath::Min(fabs(acos(reco_shower_diry)),fabs(acos(-reco_shower_diry)))" binning = "(24,0.0,1.571)" unit = "Shower Cosmicyness" type="d" training = "012"/>

<var def = "Sum$(reco_flash_total_pe_in_beamgate)" binning ="(24,0,2000)" unit = "Total PE in beamgate" type ="d" training=""/>
<var def = "Min$(reco_shower_flash_shortest_distz)" binning ="(24,0,140)" unit = "Dist shower to flash in Z" type ="d" training=""/>

<var def = "reco_vertex_in_SCB" binning="(4,-1,3)" unit = "Vertex in SCB" type ="d" training=""/>

<var def = "reco_shower_start_dist_to_SCB" binning="(24,0,20)" unit = "distance from shower start to SCB" type ="d" training=""/>
<var def = "reco_shower_start_dist_to_active_TPC" binning="(24,0,20)" unit = "distance from shower start to active TPC" type ="d" training=""/>
<var def = "reco_vertex_dist_to_SCB" binning="(24,0,75)" unit = "Distance from vertex to SCB" type ="d" training=""/>
<var def = "reco_vertex_dist_to_active_TPC" binning="(24,0,75)" unit = "Distance from vertex to active TPC" type ="d" training=""/>

<!--<var def = "reco_shower_energy_max[0]/1000.0" binning = "(20,0,0.2)" unit = "Reconstructed Shower Energy [GeV]" type = "d" logplot = "false"  training="0123"/>-->

<var def = "reco_shower_energy_max[0]/1000.0" binning = "(18,0,0.5)" unit = "Reconstructed Shower Energy [GeV]" type = "d"    training="012"/> 
<var def = "reco_shower_nuscore[0]" binning = "(24, 0, 1)" unit = "Neutrino Slice Score" type = "d"    training="012"/>


<var def = "reco_vertex_x" binning = "(24,-20,270)" unit = "Reco Vertex X [cm]" type="d"   training=""/>
<var def = "reco_vertex_y" binning = "(24,-140,140)" unit = "Reco Vertex Y [cm]" type="d"   training=""/>
<var def = "reco_vertex_z" binning = "(24,-20,1100)" unit = "Reco Vertex Z [cm]" type="d"   training=""/>

<!--<var def = "combined_score" binning = "(40,0.3,0.70)" unit = "Combined Super Score" type="d" logplot = "true" training=""/>-->
<var def = "run_number" binning  ="(24,4900,8500)" unit = "Run Number" type="d"   training=""/>

<!--- all of the assorted shower dE/dx's -->
<var def = "reco_shower_kalman_dEdx_plane2_median[0]" binning = "(24,0,10.0)" unit = "Shower dEdx plane 2 (Kalman) [MeV/cm]" type = "d"   training =""/>
<var def = "reco_shower_kalman_dEdx_plane1_median[0]" binning = "(24,0,10.0)" unit = "Shower dEdx plane 1 (Kalman) [MeV/cm]" type = "d"   training =""/>
<var def = "reco_shower_kalman_dEdx_plane0_median[0]" binning = "(24,0,10.0)" unit = "Shower dEdx plane 0 (Kalman) [MeV/cm]" type = "d"   training =""/>
<var def = "reco_shower_kalman_dEdx_allplane_median[0]" binning = "(24,0,10.0)" unit = "Shower dEdx all planes (Kalman) [MeV/cm]" type = "d"  training ="012"/>

<var def = "reco_shower3d_dEdx_plane2[0]" binning = "(24,0,10.0)" unit = "Shower3D dedx plane 2 [mev/cm]" type = "d"   training =""/>
<var def = "reco_shower3d_dEdx_plane1[0]" binning = "(24,0,10.0)" unit = "Shower3D dedx plane 1 [mev/cm]" type = "d"   training =""/>
<var def = "reco_shower3d_dEdx_plane0[0]" binning = "(24,0,10.0)" unit = "Shower3D dedx plane 0 [mev/cm]" type = "d"   training ="012"/>

<var def = "reco_shower_dEdx_plane2_median[0]" binning = "(9,0,10.0)" unit = "median dedx plane 2 [mev/cm]" type = "d"   training =""/>
<var def = "reco_shower_dEdx_plane1_median[0]" binning = "(9,0,10.0)" unit = "median dedx plane 1 [mev/cm]" type = "d"   training =""/>
<var def = "reco_shower_dEdx_plane0_median[0]" binning = "(9,0,10.0)" unit = "median dedx plane 0 [mev/cm]" type = "d"   training =""/>
<var def = "reco_shower_dEdx_amalgamated[0]" binning="(24,0.0,10.0)" unit = "Amalgamated Shower dE/dx [Mev/cm]" type = "d"    training = ""/>

<!-- shower geometry + calorimetry -->
<var def = "reco_shower_impact_parameter[0]" binning = "(24,0,400)" unit = "Shower Impact Parameter [cm]" type="d" logplot="true" training=""/>

<var def = "(reco_shower_impact_parameter[0]/reco_shower_conversion_distance[0])" binning = "(24,0,1)" unit = "Shower Impact Parameter/Shower Conversion Distance" type="d" logplot = "true" training=""/>
<var def = "reco_shower_length[0]" binning = "(24,0,100)" unit = "Reconstructed Shower Length [cm]" type = "d"    training="012"/>
<var def = "reco_shower_length[0]/(reco_shower_energy_max[0]/1000.0)" binning = "(24,0 ,2000)" unit = "Ratio Reconstruncted Shower Length/Reconstructed Shower Energy [cm/GeV]" type = "d" training="012"/>
<var def = "reco_shower_opening_angle[0]" binning = "(24,0,1)" unit = "Reconstructed Shower OpAng [cm]" type = "d"    training="012"/>
<var def = "reco_shower_phi_yx[0]" binning = "(12,-3.14,3.14)" unit = "Reconstructed Shower  #phi_{yx} [rad]" type = "d"    training="012"/>
<var def = "reco_shower_theta_yz[0]" binning = "(12,-3.14,3.14)" unit = "Reconstructed Shower #theta_{yz} [rad]" type = "d"    training="012"/>

<var def = "(reco_shower_trackscore[0])" binning = "(20,0,0.5)" unit = "Shower Score" type ="d" training ="012"/>
<!--<var def = "(reco_shower_trackscore[0])" binning = "(40,0,0.5)" unit = "Shower Score" type ="d" training ="0123"/>-->


<var def = "TMath::Min(TMath::Min(reco_shower_start_to_nearest_dead_wire_plane0,reco_shower_start_to_nearest_dead_wire_plane1),reco_shower_start_to_nearest_dead_wire_plane2)" unit = "(distance from shower start to nearest dead wire)" binning ="(24,0,3)" type="d" training="012"/>
<var def = "reco_shower_num_daughters" binning = "(3,0,3)" unit = "Num Dau Shower" type="d" training=""/>

<var def = "reco_shower_startx" binning = "(8,-20,270)" unit = "Reco Shower Start X [cm]" type="d"   training=""/>
<var def = "reco_shower_starty" binning = "(8,-140,140)" unit = "Reco Shower Start Y [cm]" type="d"   training=""/>
<var def = "reco_shower_startz" binning = "(8,-20,1100)" unit = "Reco Shower Start Z [cm]" type="d"   training=""/>

<!--adding the shower end point in XYZ-->
<var def = "reco_shower_startx[0] + (reco_shower_length[0] * reco_shower_dirx[0])" unit = "Shower End X [cm]" binning = "(24,-20,270)" type = "d" training = ""  />
<var def = "reco_shower_starty[0] + (reco_shower_length[0] * reco_shower_diry[0])" unit = "Shower End Y [cm]" binning = "(24,-140,140)" type = "d" training = ""  />
<var def = "reco_shower_startz[0] + (reco_shower_length[0] * reco_shower_dirz[0])" unit = "Shower End Z [cm]" binning = "(24,-20,1100" type = "d" training = ""  />

<!-- Mark is Bored on flight to Korea variables but he remembered to grab a local copy of all stage 0 vertexed files so is doing 14 hours of "feature development" wooo -->

<var def = "reco_shower_energy_max/(3.0*(reco_shower_num_hits_plane2+reco_shower_num_hits_plane0+reco_shower_num_hits_plane1))" unit="Ratio of energy to number of hits" binning = "(24,0,1)" type="d" training="012"/>
<var def = "reco_shower_energy_max/(100.0*reco_shower_length*reco_shower_opening_angle)" unit = "ratio of calo energy to geometric size" binning = "(24,0,1.0)" type = "d" training = "012"/>
<var def = "sqrt(pow(0.001*reco_shower_energy_max[0]*reco_shower_diry[0],2)+pow(0.001*reco_shower_energy_max[0]*reco_shower_dirx[0],2))" unit = "Photon Transverse Momentum [GeV]" binning = "(24,0,0.6)" type = "d" training = "012"/>

<!--
<var def = "stage1_2BDT_XGBOOSTNCPi0_mva" binning = "(24,0,1)"  unit = "NCpi0 BDT" type="d" logplot="false" training="4"/>
<var def = "stage1_2BDT_XGBOOSTBNB_mva" binning = "(40,0,1)"  unit = "BNB BDT" type="d" logplot="false" training="4"/>
<var def = "stage1_2BDT_XGBOOSTCOSMIC_mva" binning = "(40,0,1)"  unit = "COSMIC BDT" type="d" logplot="false" training="4"/>
<var def = "stage1_2BDT_XGBOOSTNue_mva" binning = "(40,0,1)"  unit = "Nue BDT" type="d" logplot="false" training="4"/>
-->

<var def = "mctruth_nu_E" binning = "(14, 0, 3.2)" unit = "True Neutrino Energy [GeV]" type="d" training=""/>
<!--<var def = "1g0pJan2020_v1Nue_mva" binning = "(15,0.0,1)" unit = "Nue BDT Score" type="d"  training= "" logplot="true"/>-->
<var def = "1g0pJan2020_v1COSMIC_mva" binning = "(25,0.0,1.0)" unit = "Cosmic BDT Score" type="d" training= "" logplot="true"/> 
<var def = "1g0pJan2020_v1NCPi0_mva" binning = "(25,0.0,0.87)" unit = "NCpi0 BDT Score" type="d" training= "" logplot="true"/> 
<var def = "1g0pJan2020_v1BNB_mva" binning = "(25,0.0,1.0)" unit = "BNB BDT Score" type="d" training= "" logplot="true"/> 

<var def = "1g0pJan2020_v1COSMIC_mva" binning = "(30,0.93,1.0)" unit = "High Cosmic BDT Score" type="d" training= "" logplot="true"/> 
<var def = "1g0pJan2020_v1NCPi0_mva" binning = "(30,0.6,0.86)" unit = "High NCpi0 BDT Score" type="d" training= "" logplot="true"/> 
<var def = "1g0pJan2020_v1BNB_mva" binning = "(30,0.55,0.98)" unit = "High BNB BDT Score" type="d" training= "" logplot="true"/> 



<!-- ================= RECO-MC Matching ======================== -->
<!--
<recomc>
    <def name="Cosmic Contaminated" col ="( 126,126,241)"> 
     (sim_shower_overlay_fraction &gt; 0.4)        
    </def> 
    <def name="No visible p^{+} or #gamma" col ="(239,202,140)"> 
     !((sim_shower_overlay_fraction &gt; 0.4) ) &amp;&amp; ( Sum$(mctruth_exiting_proton_energy-0.93827 &gt; 0.02 )==0 ||  (mctruth_exiting_photon_energy &lt; 0.02))          
    </def> 
    <def name="More than 1 p^{+}" col ="(127,231,204)"> 
        !((sim_shower_overlay_fraction &gt; 0.4  ) ) &amp;&amp; ( Sum$(mctruth_exiting_proton_energy-0.93827 &gt; 0.02 )>1 )          
    </def> 

    <def name="Bad Reco" col ="(223,227,142)"> 
    ((sim_shower_overlay_fraction &lt; 0.4) ) &amp;&amp; ( Sum$(mctruth_exiting_proton_energy-0.93827 &gt; 0.02 )==1 &amp;&amp;  (mctruth_exiting_photon_energy &gt; 0.02))  &amp;&amp; !(sim_shower_pdg==22)
    </def> 
    <def name = "Signal Definition" col="(241,126,126)">
       ((sim_shower_overlay_fraction &lt; 0.4) ) &amp;&amp; ( Sum$(mctruth_exiting_proton_energy-0.93827 &gt; 0.02 )==1 &amp;&amp;  (mctruth_exiting_photon_energy &gt; 0.02))  &amp;&amp; (sim_shower_pdg==22) &amp;&amp;  mctruth_nu_vertex_x &gt; 5.0 &amp;&amp; mctruth_nu_vertex_x &lt; 252.35 &amp;&amp; mctruth_nu_vertex_y &gt; -111.5 &amp;&amp; mctruth_nu_vertex_y &lt; 111.5 &amp;&amp; mctruth_nu_vertex_z &gt; 5.0 &amp;&amp; mctruth_nu_vertex_z &lt; 1031.8 &amp;&amp; mctruth_num_exiting_pi0==0 
    </def>
</recomc>
-->


<recomc>
    <def name="QuasiElastic" col ="(1.0,0.4,0.4)"> 
        GTruth_Gscatter == 1             
    </def> 
    <def name="DeepInelastic" col ="(0.48,0.87,0.3)"> 
        GTruth_Gscatter == 3             
    </def> 
    <def name = "Resonant" col="(0.41,0.38,0.97)">
        GTruth_Gscatter == 4             
    </def>
    <def name = "Coherent" col="(0.8,0.2,0.8)">
        GTruth_Gscatter == 5
    </def>
    <def name = "MEC" col="(1.0,1.0,0.4)">
        GTruth_Gscatter == 10
    </def>
</recomc>

<!--
<recomc>
    <def name="NC #Delta Radiative #gamma" col ="(1.0,0.4,0.4)"> 
        sim_shower_pdg[0] == 22 &amp;&amp; sim_shower_parent_pdg[0] != 111 &amp;&amp; mctruth_is_delta_radiative ==1 &amp;&amp; !(sim_shower_overlay_fraction[0] >=0.8 )             
    </def> 
    <def name="CC #pi^{0}" col ="(0.0,0.0,0.4)"> 
        sim_shower_pdg[0] == 22 &amp;&amp; sim_shower_parent_pdg[0] == 111 &amp;&amp; mctruth_cc_or_nc==0 &amp;&amp; !(sim_shower_overlay_fraction[0] >=0.8 )             
    </def> 
    <def name = "NC #pi^{0}" col="(0.0,0.0,1.0)">
        sim_shower_pdg[0] == 22 &amp;&amp; sim_shower_parent_pdg[0] == 111 &amp;&amp; mctruth_cc_or_nc==1 &amp;&amp; !(sim_shower_overlay_fraction[0] >=0.8 )             
    </def>
    <def name = "Non #pi^{0} #gamma" col="(0.8,0.2,0.8)">
        sim_shower_pdg[0] == 22 &amp;&amp; sim_shower_parent_pdg[0] != 111 &amp;&amp; mctruth_is_delta_radiative!=1 &amp;&amp; !(sim_shower_overlay_fraction[0] >=0.8 )             
    </def>
    <def name = "Intrinsic #nu_{e} electron" col="(1.0,1.0,0.4)">
        (mctruth_lepton_pdg[0])==11 &amp;&amp; abs(sim_shower_pdg[0]) ==11 &amp;&amp; !(sim_shower_overlay_fraction[0] >=0.8 )             
    </def>
    <def name = "BNB Michel e^{#pm}" col="(1.0,0.6,0.0)">
        abs(sim_shower_pdg[0]) ==11 &amp;&amp; abs(sim_shower_parent_pdg[0])==13 &amp;&amp; !(sim_shower_overlay_fraction[0] >=0.8 )
    </def>
    <def name = "Overlay" col="(0.2,0.8,0.2)">
        (sim_shower_overlay_fraction[0] >=0.8 )
    </def>
</recomc>
-->

<alias key="PM" value ="(0.938272)"/>
<!--<alias key="PE" value ="(reco_track_proton_kinetic_energy[0]+0.938272)"/>
<alias key="PP" value = "(sqrt(pow(reco_track_proton_kinetic_energy[0]+0.938272,2)-0.938272*0.938272))"/>
<alias key="LT" value ="0"/> -->

<alias key = "GTM" value = "sqrt(pow(0.001*reco_shower_energy_max[0]*reco_shower_diry[0],2)+pow(0.001*reco_shower_energy_max[0]*reco_shower_dirx[0],2))"/>
<!--<alias key = "PTM" value = "sqrt(pow((reco_track_proton_kinetic_energy[0]+0.938272)*reco_track_diry[0],2)+pow((reco_track_proton_kinetic_energy[0]+0.938272)*reco_track_dirx[0],2))"/>

<alias key = "SIDX" value ="(reco_shower_startx[0]-reco_track_startx[0])/(sqrt( pow(reco_shower_startx[0]-reco_track_startx[0],2)+   pow(reco_shower_starty[0]-reco_track_starty[0],2) + pow(reco_shower_startz[0]-reco_track_startz[0],2)    ))"/>
<alias key = "SIDY" value ="(reco_shower_starty[0]-reco_track_starty[0])/(sqrt( pow(reco_shower_startx[0]-reco_track_startx[0],2)+   pow(reco_shower_starty[0]-reco_track_starty[0],2) + pow(reco_shower_startz[0]-reco_track_startz[0],2)    ))"/>
<alias key = "SIDZ" value ="(reco_shower_startz[0]-reco_track_startz[0])/(sqrt( pow(reco_shower_startx[0]-reco_track_startx[0],2)+   pow(reco_shower_starty[0]-reco_track_starty[0],2) + pow(reco_shower_startz[0]-reco_track_startz[0],2)    ))"/> -->

